Backport of:

From de6cdeb607679d30f6ec4c3a1fbf15b6a21c240e Mon Sep 17 00:00:00 2001
From: Cristy <mikayla-grace@urban-warrior.org>
Date: Sun, 7 Apr 2019 18:40:22 -0400
Subject: [PATCH] ...

---
 coders/xwd.c     | 58 +++++++++++++++++++++++++++++++++---------------
 magick/nt-base.c | 22 +++++++++---------
 2 files changed, 50 insertions(+), 30 deletions(-)

Index: imagemagick-6.9.10.23+dfsg/coders/xwd.c
===================================================================
--- imagemagick-6.9.10.23+dfsg.orig/coders/xwd.c	2019-06-12 13:43:45.851407640 -0400
+++ imagemagick-6.9.10.23+dfsg/coders/xwd.c	2019-06-12 13:44:28.943580158 -0400
@@ -40,6 +40,7 @@
   Include declarations.
 */
 #include "magick/studio.h"
+#include "magick/attribute.h"
 #include "magick/blob.h"
 #include "magick/blob-private.h"
 #include "magick/cache.h"
@@ -239,7 +240,15 @@ static Image *ReadXWDImage(const ImageIn
   if (header.file_version != XWD_FILE_VERSION)
     ThrowReaderException(CorruptImageError,"FileFormatVersionMismatch");
   if (header.header_size < sz_XWDheader)
-    ThrowReaderException(CorruptImageError,"CorruptImage");
+    ThrowReaderException(CorruptImageError,"ImproperImageHeader");
+  if ((header.bits_per_pixel == 0) || (header.bits_per_pixel > 32))
+    ThrowReaderException(CorruptImageError,"ImproperImageHeader");
+  if (((header.bitmap_pad % 8) != 0) || (header.bitmap_pad > 32))
+    ThrowReaderException(CorruptImageError,"ImproperImageHeader");
+  if (header.bitmap_unit > 32)
+    ThrowReaderException(CorruptImageError,"ImproperImageHeader");
+  if (header.ncolors > 256)
+    ThrowReaderException(CorruptImageError,"ImproperImageHeader");
   switch (header.visual_class) {
     case StaticGray:
     case GrayScale:
@@ -257,9 +266,11 @@ static Image *ReadXWDImage(const ImageIn
     case ZPixmap:
       break;
     default:
-      ThrowReaderException(CorruptImageError,"CorruptImage");
+      ThrowReaderException(CorruptImageError,"ImproperImageHeader");
   }
-  length=(size_t) header.header_size-sz_XWDheader;
+  length=(size_t) (header.header_size-sz_XWDheader);
+  if ((length+1) != ((size_t) ((CARD32) (length+1))))
+    ThrowReaderException(CorruptImageError,"ImproperImageHeader");
   comment=(char *) AcquireQuantumMemory(length+1,sizeof(*comment));
   if (comment == (char *) NULL)
     ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
@@ -348,7 +359,7 @@ static Image *ReadXWDImage(const ImageIn
         colors[i].blue=color.blue;
         colors[i].flags=(char) color.flags;
         if (color.flags != 0)
-         authentic_colormap=MagickTrue;
+          authentic_colormap=MagickTrue;
       }
       /*
         Ensure the header byte-order is most-significant byte first.
@@ -481,15 +492,15 @@ static Image *ReadXWDImage(const ImageIn
             for (x=0; x < (ssize_t) image->columns; x++)
             {
               pixel=XGetPixel(ximage,(int) x,(int) y);
-              index=ConstrainColormapIndex(image,(pixel >> red_shift) &
-                red_mask);
+              index=ConstrainColormapIndex(image,(ssize_t) (pixel >>
+                red_shift) & red_mask);
               SetPixelRed(q,ScaleShortToQuantum(colors[(ssize_t) index].red));
-              index=ConstrainColormapIndex(image,(pixel >> green_shift) &
-                green_mask);
+              index=ConstrainColormapIndex(image,(ssize_t) (pixel >>
+                green_shift) & green_mask);
               SetPixelGreen(q,ScaleShortToQuantum(colors[(ssize_t)
                 index].green));
-              index=ConstrainColormapIndex(image,(pixel >> blue_shift) &
-                blue_mask);
+              index=ConstrainColormapIndex(image,(ssize_t) (pixel >>
+                blue_shift) & blue_mask);
               SetPixelBlue(q,ScaleShortToQuantum(colors[(ssize_t) index].blue));
               q++;
             }
@@ -559,8 +570,8 @@ static Image *ReadXWDImage(const ImageIn
           indexes=GetAuthenticIndexQueue(image);
           for (x=0; x < (ssize_t) image->columns; x++)
           {
-            index=ConstrainColormapIndex(image,XGetPixel(ximage,(int) x,
-              (int) y));
+            index=ConstrainColormapIndex(image,(ssize_t) XGetPixel(ximage,(int)
+              x,(int) y));
             SetPixelIndex(indexes+x,index);
             SetPixelRGBO(q,image->colormap+(ssize_t) index);
             q++;
@@ -708,6 +719,7 @@ static MagickBooleanType WriteXWDImage(c
     scanline_pad;
 
   ssize_t
+    count,
     y;
 
   unsigned char
@@ -731,6 +743,11 @@ static MagickBooleanType WriteXWDImage(c
   status=OpenBlob(image_info,image,WriteBinaryBlobMode,&image->exception);
   if (status == MagickFalse)
     return(status);
+  if ((image->columns != (CARD32) image->columns) ||
+      (image->rows != (CARD32) image->rows))
+    ThrowWriterException(ImageError,"WidthOrHeightExceedsLimit");
+  if ((image->storage_class == PseudoClass) && (image->colors > 256))
+    (void) SetImageType(image,TrueColorType);
   (void) TransformImageColorspace(image,sRGBColorspace);
   /*
     Initialize XWD file header.
@@ -815,8 +832,8 @@ static MagickBooleanType WriteXWDImage(c
           {
             MSBOrderLong((unsigned char *) &colors[i].pixel,
               sizeof(colors[i].pixel));
-            MSBOrderShort((unsigned char *) &colors[i].red,
-              3*sizeof(colors[i].red));
+            MSBOrderShort((unsigned char *) &colors[i].red,3*
+              sizeof(colors[i].red));
           }
       }
       for (i=0; i < (ssize_t) image->colors; i++)
@@ -826,7 +843,9 @@ static MagickBooleanType WriteXWDImage(c
         color.green=colors[i].green;
         color.blue=colors[i].blue;
         color.flags=(CARD8) colors[i].flags;
-        (void) WriteBlob(image,sz_XWDColor,(unsigned char *) &color);
+        count=WriteBlob(image,sz_XWDColor,(unsigned char *) &color);
+        if (count != (ssize_t) sz_XWDColor)
+          break;
       }
       colors=(XColor *) RelinquishMagickMemory(colors);
     }
@@ -866,7 +885,10 @@ static MagickBooleanType WriteXWDImage(c
       }
     for (x=0; x < (ssize_t) scanline_pad; x++)
       *q++='\0';
-    (void) WriteBlob(image,(size_t) (q-pixels),pixels);
+    length=(size_t) (q-pixels);
+    count=WriteBlob(image,length,pixels);
+    if (count != (ssize_t) length)
+      break;
     status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,
       image->rows);
     if (status == MagickFalse)
@@ -874,6 +896,6 @@ static MagickBooleanType WriteXWDImage(c
   }
   pixels=(unsigned char *) RelinquishMagickMemory(pixels);
   (void) CloseBlob(image);
-  return(MagickTrue);
+  return(y < (ssize_t) image->rows ? MagickFalse :  MagickTrue);
 }
 #endif
Index: imagemagick-6.9.10.23+dfsg/magick/nt-base.c
===================================================================
--- imagemagick-6.9.10.23+dfsg.orig/magick/nt-base.c	2019-06-12 13:43:45.851407640 -0400
+++ imagemagick-6.9.10.23+dfsg/magick/nt-base.c	2019-06-12 13:43:45.851407640 -0400
@@ -1173,8 +1173,8 @@ static int NTLocateGhostscript(DWORD fla
   return(status);
 }
 
-static int NTGhostscriptGetString(const char *name,BOOL *is_64_bit,
-  char *value,const size_t length)
+static int NTGhostscriptGetString(const char *name,BOOL *is_64_bit,char *value,
+  const size_t length)
 {
   char
     buffer[MaxTextExtent],
@@ -1184,16 +1184,16 @@ static int NTGhostscriptGetString(const
     extent;
 
   static const char
-    *product_family=(const char *) NULL;
+    *product_family = (const char *) NULL;
 
   static BOOL
-    is_64_bit_version=FALSE;
+    is_64_bit_version = FALSE;
 
   static int
-    flags=0,
-    major_version=0,
-    minor_version=0,
-    root_index=0;
+    flags = 0,
+    major_version = 0,
+    minor_version = 0,
+    root_index = 0;
 
   /*
     Get a string from the installed Ghostscript.
@@ -1264,8 +1264,7 @@ static int NTGhostscriptGetString(const
   (void) FormatLocaleString(buffer,MaxTextExtent,"SOFTWARE\\%s\\%d.%02d",
     product_family,major_version,minor_version);
   extent=(int) length;
-  if (NTGetRegistryValue(registry_roots[root_index].hkey,buffer,flags,name,
-    value,&extent) == 0)
+  if (NTGetRegistryValue(registry_roots[root_index].hkey,buffer,flags,name,value,&extent) == 0)
     {
       (void) LogMagickEvent(ConfigureEvent,GetMagickModule(),
         "registry: \"%s\\%s\\%s\"=\"%s\"",registry_roots[root_index].name,
@@ -1287,7 +1286,6 @@ MagickPrivate int NTGhostscriptDLL(char
   if ((*dll == '\0') &&
       (NTGhostscriptGetString("GS_DLL",&is_64_bit_version,dll,sizeof(dll)) == FALSE))
     return(FALSE);
-
 #if defined(_WIN64)
   if (!is_64_bit_version)
     return(FALSE);
@@ -1409,7 +1407,7 @@ MagickPrivate int NTGhostscriptEXE(char
 %
 %  The format of the NTGhostscriptFonts method is:
 %
-%      int NTGhostscriptFonts(char *path, int length)
+%      int NTGhostscriptFonts(char *path,int length)
 %
 %  A description of each parameter follows:
 %
